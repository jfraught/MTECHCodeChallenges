import UIKit

// 3n + 1 Problem (Collatz Conjecture) Part 2

// A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in turn:
// If even: divide by 2.
// If odd: multiply by 3, then add 1.
// The Collatz algorithm has been tested and found to always reach 1 for all positive integers.

// Task: Create a function that, when given two positive integers a & b, returns the string "a" if integer 'a' took fewer steps to reach 1 than b when passed through the Collatz sequence, or "b" if integer 'b' took fewer steps to reach 1 than a.

func collatzSteps(_ num: Int, steps: Int = 0 ) -> Int {
    var steps = steps
    if num == 1 {
        return steps
    }
    
    if num.isMultiple(of: 2) {
        steps += 1
        return collatzSteps(num / 2, steps: steps)
    } else {
        return collatzSteps(num * 3 + 1, steps: steps )
    }
}

func collatz(_ a: Int, _ b: Int) -> String {
    collatzSteps(a) > collatzSteps(b) ? "b" : "a"
}

// Examples
//


collatz(10, 15) // a
//
collatz(13, 16) // b
//
collatz(53782, 72534) // b

// Assume a and b never take the same number of steps to reach 1.
